

Texture2D<float> tShadowMap;
SamplerComparisonState sShadowSampler;
Texture2D<float3> tTexture;
sampler sTexture;

float2 vShadowMapSize;

struct VSOut
{
    float3 N      : TEXCOORD0;
    float4 vPosSM : TEXCOORD1;
    float3 L      : TEXCOORD2;
    float2 uv     : TEXCOORD3;
    float4 vPos   : SV_POSITION;
};


 


float PCFGather7x7( float3 vPosSM, float2 Size, Texture2D<float> t, SamplerComparisonState s )
{
    float z   = saturate(vPosSM.z);
    
    float2 uv = (vPosSM.xy*Size);    
    float2 vWeights = frac(uv.xy); // grab bilinear weights
    
    // snap UV to texel center
    //  If we don't do this, we can end up rouning differently
    //  than the sampler does, and our weights will be wrong
    uv = (floor(uv)+0.5)/Size; 

    float4 v0  = t.GatherCmp( s, uv, z, int2(-3, -3) );
    float4 v1  = t.GatherCmp( s, uv, z, int2(-1, -3) );
    float4 v2  = t.GatherCmp( s, uv, z, int2( 1, -3) );
    float4 v3  = t.GatherCmp( s, uv, z, int2( 3, -3) );

    float4 v4  = t.GatherCmp( s, uv, z, int2(-3, -1) );
    float4 v5  = t.GatherCmp( s, uv, z, int2(-1, -1) );
    float4 v6  = t.GatherCmp( s, uv, z, int2( 1, -1) );
    float4 v7  = t.GatherCmp( s, uv, z, int2( 3, -1) );

    float4 v8  = t.GatherCmp( s, uv, z, int2(-3, 1) );
    float4 v9  = t.GatherCmp( s, uv, z, int2(-1, 1) );
    float4 v10 = t.GatherCmp( s, uv, z, int2( 1, 1) );
    float4 v11 = t.GatherCmp( s, uv, z, int2( 3, 1) );

    float4 v12 = t.GatherCmp( s, uv, z, int2(-3, 3) );
    float4 v13 = t.GatherCmp( s, uv, z, int2(-1, 3) );
    float4 v14 = t.GatherCmp( s, uv, z, int2( 1, 3) );
    float4 v15 = t.GatherCmp( s, uv, z, int2( 3, 3) );


    // tap locations
    //    .    .   .   .   .   .   .    .
    //      0        1       2       3
    //    .    .   .   .   .   .   .    .
    //          
    //    .    .   .   .   .   .   .    .
    //      4        5       6       7
    //    .    .   .   .   .   .   .    .
    //                   x
    //    .    .   .   .   .   .   .    .
    //      8        9      10       11
    //    .    .   .   .   .   .   .    .
    //
    //    .    .   .   .   .   .   .    .
    //      12       13      14      15
    //    .    .   .   .   .   .   .    .  
    //
    // gather4 texel ordering:
    //  w  z
    //  x  y
    //       
  
    float u = vWeights.x;
    float v = vWeights.y;
    float r0 = ( v0.z  + v1.z  + v1.w  + v2.z  + v2.w  + v3.w  ) + u*v3.z  + (1-u)*v0.w;
    float r1 = ( v0.y  + v1.y  + v1.x  + v2.y  + v2.x  + v3.x  ) + u*v3.y  + (1-u)*v0.x;
    float r2 = ( v4.z  + v5.z  + v5.w  + v6.z  + v6.w  + v7.w  ) + u*v7.z  + (1-u)*v4.w;
    float r3 = ( v4.y  + v5.y  + v5.x  + v6.y  + v6.x  + v7.x  ) + u*v7.y  + (1-u)*v4.x;
    float r4 = ( v8.z  + v9.z  + v9.w  + v10.z + v10.w + v11.w ) + u*v11.z + (1-u)*v8.w;
    float r5 = ( v8.y  + v9.y  + v9.x  + v10.y + v10.x + v11.x ) + u*v11.y + (1-u)*v8.x;
    float r6 = ( v12.z + v13.z + v13.w + v14.z + v14.w + v15.w ) + u*v15.z + (1-u)*v12.w;
    float r7 = ( v12.y + v13.y + v13.x + v14.y + v14.x + v15.x ) + u*v15.y + (1-u)*v12.x;
    float blend = r0*(1-v) + r1 + r2 + r3 + r4 + r5 + r6 + r7*v;
    return blend/49;
}


// Simple grid of NxN bilinear taps
// taps == 2*n+1.   use n=0 for 1x1, n=1 for 3x3, n=2 for 5x5, etc
float PCFBilin(float3 vPosSM, Texture2D<float> t, SamplerComparisonState s, int n )
{  
    float2 uv = vPosSM.xy;
    float z = saturate(vPosSM.z);
    float v=0;

    [unroll]
    for( int x=-n; x<=n; x+= 1 )
        [unroll]
        for( int y=-n; y<=n; y+= 1 )
            v += t.SampleCmp(s,uv,z,int2(x,y) );
   
    float ntaps = (2*n+1)*(2*n+1);
    return v/(ntaps);
}

float PCFBilin3x3(float3 vPosSM, Texture2D<float> t, SamplerComparisonState s, int n )
{  
    float2 uv = vPosSM.xy;
    float z = saturate(vPosSM.z);

    float t0 = t.SampleCmp( s,uv,z,int2(-2,-2) );
    float t1 = t.SampleCmp( s,uv,z,int2(-2,-1) );
    float t2 = t.SampleCmp( s,uv,z,int2(-2,-0) );
    float t3 = t.SampleCmp( s,uv,z,int2(-2,1) );
    float t4 = t.SampleCmp( s,uv,z,int2(-2,2) );
    
    t0 += t.SampleCmp( s,uv,z,int2(-1,-2) );
    t1 += t.SampleCmp( s,uv,z,int2(-1,-1) );
    t2 += t.SampleCmp( s,uv,z,int2(-1,-0) );
    t3 += t.SampleCmp( s,uv,z,int2(-1, 1) );
    t4 += t.SampleCmp( s,uv,z,int2(-1, 2) );
    
    t0 += t.SampleCmp( s,uv,z,int2(0,-2) );
    t1 += t.SampleCmp( s,uv,z,int2(0,-1) );
    t2 += t.SampleCmp( s,uv,z,int2(0,-0) );
    t3 += t.SampleCmp( s,uv,z,int2(0, 1) );
    t4 += t.SampleCmp( s,uv,z,int2(0, 2) );
    
    t0 += t.SampleCmp( s,uv,z,int2(1,-2) );
    t1 += t.SampleCmp( s,uv,z,int2(1,-1) );
    t2 += t.SampleCmp( s,uv,z,int2(1,-0) );
    t3 += t.SampleCmp( s,uv,z,int2(1, 1) );
    t4 += t.SampleCmp( s,uv,z,int2(1, 2) );
    
    t0 += t.SampleCmp( s,uv,z,int2(2,-2) );
    t1 += t.SampleCmp( s,uv,z,int2(2,-1) );
    t2 += t.SampleCmp( s,uv,z,int2(2,-0) );
    t3 += t.SampleCmp( s,uv,z,int2(2, 1) );
    t4 += t.SampleCmp( s,uv,z,int2(2, 2) );
    
   	float v = (t0+t1)+t2+(t3+t4);
    float ntaps = (2*n+1)*(2*n+1);
    return v/(ntaps);
}


float4 main(  VSOut input ) : SV_TARGET
{
    float3 vPosSM = input.vPosSM.xyz / input.vPosSM.w;
    float2 vClip  = ( abs(vPosSM.xy) > 1 ? 1 : 0 );
   
    vPosSM.xy = vPosSM.xy*float2(0.5,-0.5) + float2(0.5,0.5);
    //float fShadow = tShadowMap.SampleCmp( sShadowSampler, vPosSM.xy, saturate(vPosSM.z) );
    //float fShadow = PCFGather5x5(vPosSM, vShadowMapSize, tShadowMap, sShadowSampler  );
    float fShadow = PCFBilin(vPosSM,tShadowMap,sShadowSampler,2);
    float3 L      = normalize( input.L );
    float3 N      = normalize( input.N );
    float3 C      = saturate(dot(N,L)) * saturate(fShadow-vClip.x-vClip.y) * tTexture.Sample(sTexture,input.uv) ;
    return float4(pow(C.xyz,1/2.2),1);
}