
cbuffer switches
{
	bool g_bObjectSpaceNM;
	bool g_bSpec;
	bool g_bCube;
	bool g_bRough;
	bool g_bMetallic;
	bool g_bNM;
	bool g_bSMap;
	float3 g_LightDir;
	float3 g_LightColor;
	float3 g_EyePos;
	float g_StaticRoughness;
	
	float4x4 g_mShadowMap;
	float2 g_ShadowMapSize;

};

#define PI 3.1415926

Texture2D<float4> tDiff;
Texture2D<float3> tNormal;
Texture2D<float> tRough;
TextureCube<float4> tCube;

Texture2D<float> tShadowMap;
SamplerComparisonState sCmp;

sampler s;

struct Inputs
{
   float3 N : N;
   float2 UV : uv;
   float3 T : T;
   float3 Pos : P;
};

float PCFGather5x5( float3 vPosSM, float2 Size, Texture2D<float> t, SamplerComparisonState s )
{
    float2 uv = (vPosSM.xy*Size);
    float z   = saturate(vPosSM.z);
    float2 vWeights = frac(uv.xy); // grab bilinear weights
    
    // snap UV to texel center
    //  If we don't do this, our texels won't agree with the sampler's texels
    uv = (floor(uv)+0.5)/Size; 

    float4 v0 = t.GatherCmp( s, uv, z, int2(-2, -2) );
    float4 v1 = t.GatherCmp( s, uv, z, int2( 0, -2) );
    float4 v2 = t.GatherCmp( s, uv, z, int2( 2, -2) );
    float4 v3 = t.GatherCmp( s, uv, z, int2(-2,  0) );
    float4 v4 = t.GatherCmp( s, uv, z, int2( 0,  0) );
    float4 v5 = t.GatherCmp( s, uv, z, int2( 2,  0) );
    float4 v6 = t.GatherCmp( s, uv, z, int2(-2,  2) );
    float4 v7 = t.GatherCmp( s, uv, z, int2( 0,  2) );
    float4 v8 = t.GatherCmp( s, uv, z, int2( 2,  2) );

    // tap locations
    //    .    .   .   .   .   .  
    //      0        1       2
    //    .    .   .   .   .   .   
    //          
    //    .    .   .   .   .   .   
    //      3        4       5
    //    .    .   .   .   .   .  
    //      
    //    .    .   .   .   .   .   
    //      6        7       8
    //    .    .   .   .   .   .  
    //
        
    // gather4 texel ordering:
    //  w  z
    //  x  y
    //       
     
    float u = vWeights.x;
    float v = vWeights.y;
    float r0 = ( v0.z  + v1.z  + v1.w  + v2.w ) + u*v2.z  + (1-u)*v0.w;
    float r1 = ( v0.y  + v1.y  + v1.x  + v2.x ) + u*v2.y  + (1-u)*v0.x;
    float r2 = ( v3.z  + v4.z  + v4.w  + v5.w ) + u*v5.z  + (1-u)*v3.w;
    float r3 = ( v3.y  + v4.y  + v4.x  + v5.x ) + u*v5.y  + (1-u)*v3.x;
    float r4 = ( v6.z  + v7.z  + v7.w  + v8.w ) + u*v8.z  + (1-u)*v6.w;
    float r5 = ( v6.y  + v7.y  + v7.x  + v8.x ) + u*v8.y  + (1-u)*v6.x;
    float blend = r0*(1-v) + r1 + r2 + r3 + r4 + r5*v;
    return blend/25;
}



float4 SHADE( 
           Inputs input,
           bool NORMAL_MAP,
           bool TANGENT_SPACE_NM,
           bool SPEC,
           bool METALLIC,
           bool ROUGHNESS_MAP,
           bool CUBE_MAP,
           bool SHADOWS
           ) : SV_TARGET
{ 
    float2 UV = input.UV;
    float4 diff   = tDiff.Sample(s,UV);
	float3 V = normalize(input.Pos - g_EyePos);
    float3 N = normalize(input.N);
   
   
   
   	[branch]
    if( NORMAL_MAP )
    {
    	float3 normaltx = tNormal.Sample(s,UV).xyz;
    	
   		[branch]
    	if( TANGENT_SPACE_NM )
    	{
	    	float3 T = normalize(input.T);
	        float3 B = cross(N,T);
	    		 N = B * normaltx.x + 
	    	         T * normaltx.y +
	    	         N * normaltx.z;
    	}
    }
    
    float3 vDirect = diff.xyz*saturate( dot(N,g_LightDir) );
  
   	[branch]
    if( SPEC )
   	{
   		float rough = g_StaticRoughness;
   	
   		[branch]
   		if( ROUGHNESS_MAP )
   		{
   		     rough = tRough.Sample( s, UV );
   		}
   		     
   		float3 H = normalize( g_LightDir +V  );
   		float fSpec = ((rough+1)/(2.0f*PI))*pow( saturate(dot(N,H)), rough );
   		float3 vSpec = fSpec;
   		
   		[branch]
   		if( METALLIC )
   		    vSpec *= diff.xyz;
   		    
   		vDirect += vSpec;
   	}
   	float3 vIndirect = 0;
   	
   	[branch]
	if( CUBE_MAP )
	{
	   	float3 cube = tCube.Sample( s, reflect(N,V) );
	   	
   		[branch]
	   	if( METALLIC )
	   		cube *= diff.xyz;
	   	vIndirect += cube;
	}
	
    [branch]
   	if( SHADOWS )
   	{
   		float4 vPosSM = mul( float4(input.Pos,1), g_mShadowMap  );
   		float sh = PCFGather5x5( vPosSM.xyz/vPosSM.w, g_ShadowMapSize, tShadowMap, sCmp );
   		vDirect *= sh;
   	}
   	
   		
	return float4(vDirect*g_LightColor + vIndirect,1); 
}




float4 main( Inputs input ) : SV_TARGET
{

	//return SHADE_GOOD(input);

	return SHADE(input,true,true,true,true,true, true, true );

	//return SHADE(input,g_bNM, g_bObjectSpaceNM, g_bSpec,g_bMetallic, g_bCube, g_bRough, g_bSMap );
}